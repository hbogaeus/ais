
def gen_init_strings(FILE, tot_attendants, tot_tables, tot_interests, exhibitors_idx, students_idx, static_ex, static_stud):

    strings = [
    '* this is an autogenerated file!',
    'SETS',
    'j           attendants          /j0*j%i/'%tot_attendants,
    'k           tables              /k0*k%i/'%tot_tables,
    'l           interests           /l0*l%i/'%tot_interests,
    'js(j)       subset of students  /j%i*j%i/'%(students_idx[0], students_idx[1]),
    'je(j)       subset of exhibit   /j%i*j%i/'%(exhibitors_idx[0], exhibitors_idx[1]),
    'js_s(js)    static students     /j%i*j%i/'%(static_stud[0], static_stud[1]),
    'je_s(je)    static exhibitors   /j%i*j%i/'%(static_ex[0], static_ex[1]),
    ';' ]

    for string in strings:
        #print(string)
        FILE.write('%s\n'%string)
    FILE.write('\n\n')


def genGAMS_tables_2d(FILE, tabName, sets, colHeaders, rowHeaders, values, helptxt=' ', delimiter='    '):
    '''
    Generates a specific gams table by writing it to FILE

    Required input:
    FILE (pointer)      - an opened file pointer to the target .gms file
    tabName (str)       - the table name
    sets    (list)      - list of the two sets used (see GAMS doc)
    colHeaders (list)   - list of strings for the column headers
    rowHeaders (list)   - list of strings for the row headers
    values (numpy mat)  - a numpy matrix with the values in the table (for now int)

    Optional input:
    helptxt (str)       - text describing the table (see GAMS doc)
    delimiter (str)     - gams is sensitive to blank spaces, control by this
                          longer row names might need an increased delimiter!
    '''
    FILE.write('\nTABLE %s(%s,%s) %s\n'%( tabName, sets[0], sets[1], helptxt )   )
    FILE.write('%s'%delimiter)
    for h in colHeaders:
        FILE.write('%s%s'%(delimiter, h))
    FILE.write('\n')
    for i, h in enumerate(rowHeaders):
        FILE.write('%s%s%s'%(h,(len(delimiter) - len(h) )*' ',delimiter))
        for j, val in enumerate(values[i]):
            FILE.write('%i%s%s'%(val, (len(colHeaders[j])-1 )*' ', delimiter    )   )
            #FILE.write('%i%s'%(val, (len('%s'%h) - len(str(val)))*' ' + delimiter + '  '  ))
        FILE.write('\n')
    FILE.write('\n')

def genGAMS_params(FILE, param, set, vals, helptxt, delimiter='    '):
    ''' generate gams parameters of a certain set, see GAMS doc for instruction

    Required input:
    FILE (pointer)  - an opened file pointer to a .gms file
    param (str)    - a string name of sets
    set (list)      - a list of the set used
    vals (list)     - a list of integer values (easy to change to float if nec)
    helptxt (str)   - a string (see GAMS doc)

    Optional input:
    delimiter (str) - since gams is sensitive on blank spaces, control it here
    '''
    FILE.write('\nPARAMETER \t%s %s\n'%(param, helptxt))
    for i in range(len(set)):
        if i == 0:
            FILE.write('   /')
        else:
            FILE.write('%s'%delimiter)
        FILE.write('  %s %i'%(set[i], vals[i]))
        if i == len(set)-1:
            FILE.write('  / ;\n')
        else:
            FILE.write('\n')

def gen_gams_eqns(FILE, path_opt):
    '''
    '''
    with open(path_opt, 'r') as optFILE:
        opt_strings = optFILE.readlines()
    for string in opt_strings:
        FILE.write(string)
